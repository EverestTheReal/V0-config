[include heatsoak.cfg]
##########################################################################
#       Print Start / End Macro
##########################################################################

[gcode_macro PRINT_START_VARIABLES]
description: Set variables for print
### Variables (used in PRINT_WARMUP and PRINT_PREPARE) ###
variable_extruder_temp: 200
variable_bed_temp: 60
variable_material: ""
variable_soak_temp : 0
variable_heatsoak_state: False
variable_tool: 0
gcode:
    ### Get Parameters ###
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set SOAK_TEMP = params.SOAK_TEMP|float %}
    {% set MATERIAL = params.MATERIAL|string %}
    #{% set TOOL = params.TOOL|int %}

    ### Set Variables ###  
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=bed_temp VALUE={BED_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=soak_temp VALUE={SOAK_TEMP} # set variable
    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=material VALUE="'{MATERIAL}'" # set variable
    #SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=tool VALUE={TOOL} # set variable

[gcode_macro PRINT_WARMUP]
description: Perform initial heating tasks

gcode: 
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp
	{% set th = printer.toolhead %}

    CLEAR_PAUSE # abort any pause...
    #status_heating

	{% if print_start.material == "ABS" or print_start.material == "ASA" or print_start.material == "PC" or print_start.material == "PA" or print_start.material == "PA-CF" or print_start.material == "HIPS" %} # heatsoak materials (Orcaslicer)
      {% set HEATSOAK_STATE = True %} # if heatsoak is required...
	{% else %}
      {% set HEATSOAK_STATE = False %} # don't soak for any other materials
	{% endif %}

    SET_GCODE_VARIABLE MACRO=PRINT_START_VARIABLES VARIABLE=heatsoak_state VALUE={HEATSOAK_STATE} # set a variable. This can be useful for other macros in the future...
    
	{% if HEATSOAK_STATE == True %} # manage fans depending on material
      ### heated chamber ###
      SET_FAN_SPEED FAN=Auxfans SPEED=0.3 # TheFilter 100%
      #SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
	{% elif HEATSOAK_STATE == False %} # why HEATSOAK_STATE and not print_start.heatsoak_state? Because you can't retrieve the value of a variable in the same macro where you set it.
      ### cold chamber ###
      SET_FAN_SPEED FAN=Auxfans SPEED=0 # Nevermore 0%
      #SET_FAN_SPEED FAN=exhaust_fan SPEED=1 # Exhaust 100%
	{% endif %}

	G28 # home
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={print_start.extruder_temp * 0.3} # Heatsoak extruder idle temperature. Hotend fans should run...

    #AFC_PARK
    
	G90 # absolute move
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z5 F30000 # move to center before starting heatsoak
	M106 S255 # Turn on part fan
	HEAT_SOAK HEATER='heater_bed' TARGET={print_start.bed_temp} SOAKER='temperature_sensor Chamber' SOAK_TEMP={print_start.soak_temp} CANCEL='CANCEL_PRINT' TIMEOUT=60 # always heatsoak even when printing pla. Chamber target for PLA etc. is 0. Print will start after bed reached temp and chamber stabilized

[gcode_macro PRINT_START]
description: Perform calibration and get ready to print
gcode:
    {% set print_start = printer['gcode_macro PRINT_START_VARIABLES'] %} # use print_start instead of printer['gcode_macro PRINT_START_VARIABLES']. Example printer['gcode_macro PRINT_START_VARIABLES.extruder_temp'] -> print_start.extruder_temp
	{% set th = printer.toolhead %}
    
    #SET_LED LED="caselight" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
    #aRGB_White
    
    CLEAR_PAUSE # clear any pause... again
    BED_MESH_CLEAR # clear bed mesh

    M107 # turn off part fan (heatsoak turned it on before)

    #status_homing
    M117 Homing...

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center

    #status_heating
    M117 Heating...

    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={print_start.bed_temp} 
    #M109 S{print_start.extruder_temp} # wait for extruder temp
    #T{print_start.tool} #Load Initial Tool
    #POOP_CLEAN
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    
    M109 S150               ; wait for extruder temperature
    M190 S{print_start.bed_temp}                    ; wait for bed temprature

    #CLEAN_NOZZLE # Use nozzle cleaning macro

    #status_calibrating

    G28 Z

    M117 Calibrating first layer..
    #AUTO_OFFSET EXTRUDER_TEMP={EXTRUDER_TEMP}

    #status_leveling
    M117 BedMesh... :I

    BED_MESH_CALIBRATE

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30 F30000
    #CARTOGRAPHER_TOUCH

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000

    #clean_nozzle
    
    #status_heating
    M117 Print_Temp

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000
    
    M109 S{print_start.extruder_temp}
    
    #status_cleaning
    #M117 Cleaning
    
    #POOP_CLEAN # Use nozzle cleaning macro
	M117 LETS GOOO!!!
	
    {% if print_start.material != "TPU" %} # Only purge if material is not TPU -> No purge for TPU since this causes trouble @ 24mmÂ³/s...
      PURGE_LINE # KAMP Purge
    {% endif %}

    #SET_FAN_SPEED FAN=Controller2_fan SPEED=0.5
    #aRGB_White
    
    

[gcode_macro print_end]
description: End Print & Cooldown
gcode:
    #TIMELAPSE_TAKE_FRAME
    TURN_OFF_HEATERS     ; turns off heaters
    #CLEAN_NOZZLE
    #CLEAN_NOZZLE
    #CLEAN_NOZZLE
    G91
    G0 Z10 F30000
    G90                                                                     ; absolute positioning
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F30000             ; Park
    
    #TIMELAPSE_TAKE_FRAME
    SET_FAN_SPEED FAN=Auxfans SPEED=0 # Nevermore 0%
    #SET_FAN_SPEED FAN=exhaust_fan SPEED=0 # Exhaust 0%
    M107
    M18
    #TIMELAPSE_RENDER
    CLEAR_ACTIVE_SPOOL
    #SET_FAN_SPEED FAN=Controller2_fan SPEED=0


    #####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = 60.0 %}
    {% set y_safe = 60.0 %}
    {% set z_safe = 20 %}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    #QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

    
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True